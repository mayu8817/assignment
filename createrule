# Parse Rule String
def create_rule(rule_string):
    root = parse_rule_string(rule_string)  # Implement this parsing logic
    return root

def parse_rule_string(rule_string):
    # Dummy implementation of parsing logic for now
    # Assume rules are in the form "A AND B", "A OR B", etc.
    return {
        "node_type": "operator",
        "value": "AND",
        "left": {"node_type": "operand", "value": "A"},
        "right": {"node_type": "operand", "value": "B"}
    }

# Combine Rules
def combine_rules(rules):
    combined_root = None
    for rule in rules:
        rule_ast = create_rule(rule)
        combined_root = combine_ast(combined_root, rule_ast)  # Implement combine logic
    return combined_root

def combine_ast(ast1, ast2):
    if not ast1:
        return ast2
    return {
        "node_type": "operator",
        "value": "AND",
        "left": ast1,
        "right": ast2
    }

# Evaluate Rule
def evaluate_rule(ast, data):
    if ast["node_type"] == "operand":
        return evaluate_operand(ast, data)  # Implement evaluation logic for operands
    elif ast["node_type"] == "operator":
        left_result = evaluate_rule(ast["left"], data)
        right_result = evaluate_rule(ast["right"], data)
        return evaluate_operator(ast["value"], left_result, right_result)

def evaluate_operand(ast, data):
    return data.get(ast["value"], False)

def evaluate_operator(operator, left_result, right_result):
    if operator == "AND":
        return left_result and right_result
    elif operator == "OR":
        return left_result or right_result
    
    
# Sample test case for create_rule
rule1 = "((age > 30 AND department = 'Sales') OR (age < 25 AND department = 'Marketing')) AND (salary > 50000 OR experience > 5)"
ast1 = create_rule(rule1)

# Sample test case for combine_rules
rule2 = "((age > 30 AND department = 'Marketing')) AND (salary > 20000 OR experience > 5)"
combined_ast = combine_rules([rule1, rule2])

# Sample JSON data for evaluation
data = {"age": 35, "department": "Sales", "salary": 60000, "experience": 3}
result = evaluate_rule(combined_ast, data)
print(result)  # Expected output: True or False based on the rules